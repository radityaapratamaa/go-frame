// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/database/transaction/purchase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "bcg-test/domain/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockpurchase is a mock of purchase interface.
type Mockpurchase struct {
	ctrl     *gomock.Controller
	recorder *MockpurchaseMockRecorder
}

// MockpurchaseMockRecorder is the mock recorder for Mockpurchase.
type MockpurchaseMockRecorder struct {
	mock *Mockpurchase
}

// NewMockpurchase creates a new mock instance.
func NewMockpurchase(ctrl *gomock.Controller) *Mockpurchase {
	mock := &Mockpurchase{ctrl: ctrl}
	mock.recorder = &MockpurchaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpurchase) EXPECT() *MockpurchaseMockRecorder {
	return m.recorder
}

// CreateNew mocks base method.
func (m *Mockpurchase) CreateNew(ctx context.Context, requestData interface{}) (*models.CUDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNew", ctx, requestData)
	ret0, _ := ret[0].(*models.CUDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNew indicates an expected call of CreateNew.
func (mr *MockpurchaseMockRecorder) CreateNew(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNew", reflect.TypeOf((*Mockpurchase)(nil).CreateNew), ctx, requestData)
}

// DeleteData mocks base method.
func (m *Mockpurchase) DeleteData(ctx context.Context, id int64) (*models.CUDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, id)
	ret0, _ := ret[0].(*models.CUDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockpurchaseMockRecorder) DeleteData(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*Mockpurchase)(nil).DeleteData), ctx, id)
}

// GetDetailByID mocks base method.
func (m *Mockpurchase) GetDetailByID(ctx context.Context, id int64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailByID", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailByID indicates an expected call of GetDetailByID.
func (mr *MockpurchaseMockRecorder) GetDetailByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailByID", reflect.TypeOf((*Mockpurchase)(nil).GetDetailByID), ctx, id)
}

// GetList mocks base method.
func (m *Mockpurchase) GetList(ctx context.Context, requestData interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, requestData)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockpurchaseMockRecorder) GetList(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*Mockpurchase)(nil).GetList), ctx, requestData)
}

// UpdateData mocks base method.
func (m *Mockpurchase) UpdateData(ctx context.Context, requestData interface{}, id int64) (*models.CUDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, requestData, id)
	ret0, _ := ret[0].(*models.CUDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockpurchaseMockRecorder) UpdateData(ctx, requestData, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*Mockpurchase)(nil).UpdateData), ctx, requestData, id)
}
